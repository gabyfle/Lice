AST: Assign statement id a with expression "teset"

Function definition id: second and definition: Block statement with statements: If statement on condition Binary operator: [<variable> a] == ["test"]
. If true: Block statement with statements: Return statement: 120.000000



 if false: If statement on condition Binary operator: [<variable> b] == [0.000000]
. If true: Block statement with statements: Return statement: 12.000000



 if false: Expression statement of type void: Void

 



Assign statement id f with expression Binary operator: [120.000000] * [Function call ID: second; Expression list: ;10.000000
]



[Info] Adding key "teset" 
[Info] Adding key "test" 
[Info] Adding key 120.000000 
[Info] Adding key 0.000000 
[Info] Adding key 12.000000 
[Debug] Dumping chunk: 
[Debug] Size : 9 
[Debug] 0 --> Variable(a) 
[Debug] 1 --> String(teset) 
[Debug] 2 --> Function(1) 
[Debug] 3 --> Variable(second) 
[Debug] 4 --> Variable(b) 
[Debug] 5 --> String(test) 
[Debug] 6 --> Number(120.) 
[Debug] 7 --> Number(0.) 
[Debug] 8 --> Number(12.) 
[Debug] Variable(a) --> 0 
[Debug] Variable(b) --> 4 
[Debug] Variable(second) --> 2 
[Debug] Number(0.) --> 7 
[Debug] Number(12.) --> 8 
[Debug] Number(120.) --> 6 
[Debug] String(teset) --> 1  
[Debug] String(test) --> 5  
[Debug] Function(1) --> 2 
[Debug] Dumping chunk: 
[Debug] Size : 9 
[Debug] 0 --> Variable(a) 
[Debug] 1 --> String(teset) 
[Debug] 2 --> Function(1) 
[Debug] 3 --> Variable(second) 
[Debug] 4 --> Variable(b) 
[Debug] 5 --> String(test) 
[Debug] 6 --> Number(120.) 
[Debug] 7 --> Number(0.) 
[Debug] 8 --> Number(12.) 
[Debug] Variable(a) --> 0 
[Debug] Variable(b) --> 4 
[Debug] Variable(second) --> 2 
[Debug] Number(0.) --> 7 
[Debug] Number(12.) --> 8 
[Debug] Number(120.) --> 6 
[Debug] String(teset) --> 1  
[Debug] String(test) --> 5  
[Debug] Function(1) --> 2 
[Info] Adding key 10.000000 
[Warning] Emitting this bytecode (WITHOUT HEADER): 
[Warning] PUSHENV 
[Warning] POP 
[Warning] EXTEND 4 
[Warning] LOADK 5 
[Warning] PUSH 
[Warning] SEARCH 0 
[Warning] EQ 
[Warning] JMPNZ 39 
[Warning] PUSHENV 
[Warning] LOADK 6 
[Warning] PUSH 
[Warning] POPENV 
[Warning] POPENV 
[Warning] RETURN 
[Warning] JMP 118 
[Warning] LOADK 7 
[Warning] PUSH 
[Warning] SEARCH 4 
[Warning] EQ 
[Warning] JMPNZ 61 
[Warning] PUSHENV 
[Warning] LOADK 8 
[Warning] PUSH 
[Warning] POPENV 
[Warning] POPENV 
[Warning] RETURN 
[Warning] JMP 57 
[Warning] LDVOID 
[Warning] LDVOID 
[Warning] PUSH 
[Warning] POPENV 
[Warning] RETURN 
[Warning] Emitting this bytecode (WITH HEADER): 
[Warning] LOADK 1 
[Warning] EXTEND 0 
[Warning] LOADK 10 
[Warning] PUSH 
[Warning] LOADK 2 
[Warning] CALL 1 
[Warning] PUSH 
[Warning] LOADK 6 
[Warning] MUL 
[Warning] EXTEND 9 
[Warning] HALT 
Computed: 115 ; Real : 39
[Debug] Dumping chunk: 
[Debug] Size : 11 
[Debug] 0 --> Variable(a) 
[Debug] 1 --> String(teset) 
[Debug] 2 --> Function(39) 
[Debug] 3 --> Variable(second) 
[Debug] 4 --> Variable(b) 
[Debug] 5 --> String(test) 
[Debug] 6 --> Number(120.) 
[Debug] 7 --> Number(0.) 
[Debug] 8 --> Number(12.) 
[Debug] 9 --> Variable(f) 
[Debug] 10 --> Number(10.) 
[Debug] Variable(a) --> 0 
[Debug] Variable(b) --> 4 
[Debug] Variable(f) --> 9 
[Debug] Variable(second) --> 2 
[Debug] Number(0.) --> 7 
[Debug] Number(10.) --> 10 
[Debug] Number(12.) --> 8 
[Debug] Number(120.) --> 6 
[Debug] String(teset) --> 1  
[Debug] String(test) --> 5  
[Debug] Function(1) --> 2 
[Warning] Emitting this bytecode (WITHOUT HEADER): 
[Warning] PUSHENV 
[Warning] POP 
[Warning] EXTEND 4 
[Warning] LOADK 5 
[Warning] PUSH 
[Warning] SEARCH 0 
[Warning] EQ 
[Warning] JMPNZ 78 
[Warning] PUSHENV 
[Warning] LOADK 6 
[Warning] PUSH 
[Warning] POPENV 
[Warning] POPENV 
[Warning] RETURN 
[Warning] JMP 157 
[Warning] LOADK 7 
[Warning] PUSH 
[Warning] SEARCH 4 
[Warning] EQ 
[Warning] JMPNZ 100 
[Warning] PUSHENV 
[Warning] LOADK 8 
[Warning] PUSH 
[Warning] POPENV 
[Warning] POPENV 
[Warning] RETURN 
[Warning] JMP 96 
[Warning] LDVOID 
[Warning] LDVOID 
[Warning] PUSH 
[Warning] POPENV 
[Warning] RETURN 
[Warning] Emitting this bytecode (WITH HEADER): 
[Warning] LOADK 1 
[Warning] EXTEND 0 
[Warning] LOADK 10 
[Warning] PUSH 
[Warning] LOADK 2 
[Warning] CALL 1 
[Warning] PUSH 
[Warning] LOADK 6 
[Warning] MUL 
[Warning] EXTEND 9 
[Warning] HALT 
[Debug] LOADK 1 (pos: 0) 
[Debug] EXTEND 0 (pos: 5) 
EXTEND 0 = "teset"
0 -> teset
[Debug] LOADK 10 (pos: 10) 
[Debug] PUSH (pos: 15) 
[Debug] LOADK 2 (pos: 16) 
[Debug] CALL 1 (pos: 21) 
CALL
CALL <function object> at: 39
[Debug] PUSHENV (pos: 39) 
[Debug] POP (pos: 40) 
[Debug] EXTEND 4 (pos: 41) 
EXTEND 4 = 10.000000
4 -> 10.
0 -> teset
[Debug] LOADK 5 (pos: 46) 
[Debug] PUSH (pos: 51) 
[Debug] SEARCH 0 (pos: 52) 
4 -> 10.
0 -> teset
[Debug] EQ (pos: 57) 
[Debug] JMPNZ 78 (pos: 58) 
[Debug] LOADK 7 (pos: 78) 
[Debug] PUSH (pos: 83) 
[Debug] SEARCH 4 (pos: 84) 
4 -> 10.
0 -> teset
[Debug] EQ (pos: 89) 
[Debug] JMPNZ 100 (pos: 90) 
[Debug] MUL (pos: 100) 
